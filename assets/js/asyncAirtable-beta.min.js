(()=>{"use strict";var t={300:(t,e)=>{var r=function(){if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if(void 0!==r)return r;throw new Error("unable to locate global object")}();t.exports=e=r.fetch,r.fetch&&(e.default=r.fetch.bind(r)),e.Headers=r.Headers,e.Request=r.Request,e.Response=r.Response}},e={};function r(i){if(e[i])return e[i].exports;var o=e[i]={exports:{}};return t[i](o,o.exports,r),o.exports}(()=>{var t=r(300);const e="undefined"!=typeof window?window.fetch.bind(window):t,i={$arrayCompact:t=>`ARRAYCOMPACT({${t}})`,$arrayFlatten:t=>`ARRAYFLATTEN({${t}})`,$arrayUnique:t=>`ARRAYUNIQUE({${t}})`,$arrayJoin:(t,e=",")=>`ARRAYJOIN({${t}}, '${e}')`},o=t=>{if(null===t)return"BLANK()";switch(typeof t){case"number":return`${t}`;case"string":return`'${t}'`;case"boolean":return(t=>{if("boolean"!=typeof t)throw new Error("Invalid type");return t?"TRUE()":"FALSE()"})(t);default:throw new Error("Wrong Type")}},n={$not:t=>`NOT(${$(t)})`,$and:t=>`AND(${$(t)})`,$or:t=>`OR(${$(t)})`},s=["=","!=",">",">=","<","<="],a=(t,e)=>{if("object"!=typeof t||Array.isArray(t))throw new Error("Missing or Invalid Comparison Object");if("string"!=typeof e&&!s.includes(e))throw new Error("Missing or Invalid Comparison Operator");const r=Object.keys(t),i=`${r.map(((i,o)=>{const n=$(t[i]);return`{${i}} ${e} ${n}${o<r.length-1?", ":""}`})).join("")}`;return r.length>1?`AND(${i})`:i},c={$gt:t=>a(t,">"),$lt:t=>a(t,"<"),$gte:t=>a(t,">="),$lte:t=>a(t,"<="),$eq:t=>a(t,"="),$neq:t=>a(t,"!=")},d={$textFind:(t,e,r=0)=>`FIND(${"string"==typeof t?o(t):$(t)}, ${"string"==typeof e?o(e):$(e)}, ${r})`,$textSearch:(t,e,r=0)=>`SEARCH(${"string"==typeof t?o(t):$(t)}, ${"string"==typeof e?o(e):$(e)}, ${r})`},y=t=>{if(void 0===t)throw new Error("Missing Query Object");return null!==t&&t instanceof Object&&!Array.isArray(t)},h=t=>t instanceof Array&&t.every((t=>y(t))),u=t=>t instanceof Array&&t.every((t=>"string"==typeof t)),l=t=>"string"==typeof t||t instanceof Object&&!Array.isArray(t)&&"string"==typeof(null==t?void 0:t.$fieldName),f=t=>t.every((t=>null!=t)),p=t=>"object"!=typeof t||null===t,$=t=>{var e,r;if(void 0!==t&&!(t instanceof Function)){if(p(t))return o(t);if(t instanceof Array)return t.map((t=>$(t))).join(", ").trim();const s=Object.keys(t),a=Object.values(t);if(s.length>1&&f(a)&&h(s.map(((t,e)=>({[t]:a[e]})))))return n.$and(s.map(((t,e)=>({[t]:a[e]}))));const w=s[0];if(void 0===t[w])throw new Error("Invalid query");if("$fieldName"===w)return`{${t.$fieldName}}`;const v=t[w];if(void 0!==v){if(w in n&&(y(v)||h(v)))return n[w](v);if(w in i){if(u(v)&&u(r=v)&&2===r.length)return i[w](...v);if("string"==typeof v)return i[w](v)}else{if(w in d&&Array.isArray(v)&&(t=>t instanceof Array&&(3===t.length&&"number"==typeof t[2]||2===t.length&&(l(t[0])||y(t[0]))&&(l(t[1])||y(t[1]))))(v))return d[w](v[0],v[1],null!==(e=v[2])&&void 0!==e?e:0);if(y(v)){const t=Object.keys(v),e=Object.values(v);if(t.length>1&&f(e)&&h(t.map(((t,r)=>({[t]:e[r]}))))&&t.every((t=>t in c))&&e.every((t=>y(t)||p(t))))return n.$and(t.map(((t,r)=>({[w]:{[t]:e[r]}}))));const r=t[0],i=e[0];if(r in c&&(y(i)||p(i)))return c[r]({[w]:i})}else if(y(v)||p(v))return c.$eq({[w]:v})}}}throw new Error("Invalid Query Object")},w=t=>{if(Object.prototype.hasOwnProperty.call(t,"filterByFormula")&&Object.prototype.hasOwnProperty.call(t,"where"))throw new Error("Cannot use both where and filterByFormula as they accomplish the same thing");const e=Object.keys(t).map(((e,r)=>{const i=t[e];let o;return o=Array.isArray(i)?i.map(((t,r)=>{switch(typeof t){case"object":return Object.keys(t).map((i=>`${e}[${r}][${i}]=${t[i]}`)).join("&");case"string":return`${e}[]=${t}`}})).join("&"):"where"===e?`filterByFormula=${$(i)}`:`${e}=${i}`,0!==r?`&${o}`:o})).join("");return encodeURI(e)},v=t=>t>=300,b=(t,e,r,i=!0)=>{if(void 0===t&&i)throw new Error(`Argument "${e}" is required.`);if((void 0!==t||i)&&typeof t!==r){if("array"===r&&Array.isArray(t))return;throw new Error(`Incorrect data type on argument "${e}". Received "${typeof t}": expected "${r}"`)}};var m=function(t,e,r,i){return new(r||(r=Promise))((function(o,n){function s(t){try{c(i.next(t))}catch(t){n(t)}}function a(t){try{c(i.throw(t))}catch(t){n(t)}}function c(t){var e;t.done?o(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(s,a)}c((i=i.apply(t,e||[])).next())}))};const g=(t,r,i,o,n)=>m(void 0,void 0,void 0,(function*(){return new Promise(((s,a)=>{const c=(t,r,i,o,n)=>{o&&o<1&&a("Max timeout exceeded"),setTimeout((()=>m(void 0,void 0,void 0,(function*(){try{const a=yield e(t,r),d=yield a.json();if(429===a.status)return c(t,r,1.5*i,o-i,n);s(n?d[n]:d)}catch(t){a(t)}}))),i)};c(t,r,i,o,n)}))}));var R=function(t,e,r,i){return new(r||(r=Promise))((function(o,n){function s(t){try{c(i.next(t))}catch(t){n(t)}}function a(t){try{c(i.throw(t))}catch(t){n(t)}}function c(t){var e;t.done?o(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(s,a)}c((i=i.apply(t,e||[])).next())}))};const A=["fields","filterByFormula","maxRecords","pageSize","sort","view","where"];"undefined"!=typeof window&&(window.AsyncAirtable=class{constructor(t,r,i){if(this.select=(t,r,i)=>R(this,void 0,void 0,(function*(){try{b(t,"table","string"),b(r,"options","object",!1),b(i,"page","number",!1);const o=`${this.baseURL}/${this.base}/${t}`,n=r?Object.assign({},r):{};Object.keys(n).forEach((t=>{if(!A.includes(t))throw new Error(`Invalid option: ${t}`)}));let s="",a=[];if(i)for(let t=0;t<i;t++){s&&(n.offset=s);try{const r=yield e(`${o}?${w(n)}`,{headers:{Authorization:`Bearer ${this.apiKey}`}}),a=yield r.json();if(v(r.status)){if(429!==r.status)throw new Error(JSON.stringify(a));if(this.retryOnRateLimit&&t+1===i)return yield g(`${o}?${w(n)}`,{headers:{Authorization:`Bearer ${this.apiKey}`}},this.retryTimeout,this.maxRetry,"records")}if(t+1===i)return a.records;s=a.offset}catch(t){throw new Error(t)}}else{let t=!1;for(;!t;){s&&(n.offset=s);try{const r=yield e(`${o}?${w(n)}`,{headers:{Authorization:`Bearer ${this.apiKey}`}}),i=yield r.json();if(v(r.status)){if(429!==r.status)throw new Error(JSON.stringify(i));if(this.retryOnRateLimit)return yield g(`${o}?${w(n)}`,{headers:{Authorization:`Bearer ${this.apiKey}`}},this.retryTimeout,this.maxRetry,"records")}a=a.concat(i.records),s=i.offset,i.offset||(t=!0)}catch(t){throw new Error(t)}}}return a}catch(t){throw new Error(t)}})),this.find=(t,r)=>R(this,void 0,void 0,(function*(){try{b(t,"table","string"),b(r,"id","string");const i=`${this.baseURL}/${this.base}/${t}/${r}`,o=yield e(i,{headers:{Authorization:`Bearer ${this.apiKey}`}}),n=yield o.json();if(v(o.status)){if(429!==o.status)throw new Error(JSON.stringify(n));if(this.retryOnRateLimit)return yield g(i,{headers:{Authorization:`Bearer ${this.apiKey}`}},this.retryTimeout,this.maxRetry)}return n}catch(t){throw new Error(t)}})),this.createRecord=(t,r,i)=>R(this,void 0,void 0,(function*(){try{b(t,"table","string"),b(r,"record","object"),b(i,"typecast","boolean",!1);const o=`${this.baseURL}/${this.base}/${t}`,n={fields:r};void 0!==i&&(n.typecast=i);const s=yield e(o,{method:"post",body:JSON.stringify(n),headers:{Authorization:`Bearer ${this.apiKey}`,"Content-Type":"application/json"}}),a=yield s.json();if(v(s.status)){if(429!==s.status)throw new Error(JSON.stringify(a));if(this.retryOnRateLimit)return yield g(o,{method:"post",body:JSON.stringify(n),headers:{Authorization:`Bearer ${this.apiKey}`,"Content-Type":"application/json"}},this.retryTimeout,this.maxRetry)}return a}catch(t){throw new Error(t)}})),this.updateRecord=(t,r,i)=>R(this,void 0,void 0,(function*(){try{b(t,"table","string"),b(r,"record","object"),i&&(b(i.destructive,"opts.desctructive","boolean"),b(i.typecast,"opts.typecast","boolean",!1));const o=`${this.baseURL}/${this.base}/${t}/${r.id}`,n={fields:r.fields};void 0!==(null==i?void 0:i.typecast)&&(n.typecast=null==i?void 0:i.typecast);const s=yield e(o,{method:(null==i?void 0:i.destructive)?"put":"patch",body:JSON.stringify(n),headers:{Authorization:`Bearer ${this.apiKey}`,"Content-Type":"application/json"}}),a=yield s.json();if(v(s.status)){if(429!==s.status)throw new Error(JSON.stringify(a));if(this.retryOnRateLimit)return yield g(o,{method:(null==i?void 0:i.destructive)?"put":"patch",body:JSON.stringify(n),headers:{Authorization:`Bearer ${this.apiKey}`,"Content-Type":"application/json"}},this.retryTimeout,this.maxRetry)}return a}catch(t){throw new Error(t)}})),this.deleteRecord=(t,r)=>R(this,void 0,void 0,(function*(){try{b(t,"table","string"),b(r,"id","string");const i=`${this.baseURL}/${this.base}/${t}/${r}`,o=yield e(i,{method:"delete",headers:{Authorization:`Bearer ${this.apiKey}`}}),n=yield o.json();if(v(o.status)){if(429!==o.status)throw new Error(JSON.stringify(n));if(this.retryOnRateLimit)return yield g(i,{method:"delete",headers:{Authorization:`Bearer ${this.apiKey}`}},this.retryTimeout,this.maxRetry)}return n}catch(t){throw new Error(t)}})),this.bulkCreate=(t,r,i)=>R(this,void 0,void 0,(function*(){try{b(t,"table","string"),b(r,"records","array"),b(i,"typecast","boolean",!1);const o=`${this.baseURL}/${this.base}/${t}`,n={records:r.map((t=>({fields:t})))};void 0!==i&&(n.typecast=i);const s=yield e(o,{method:"post",body:JSON.stringify(n),headers:{Authorization:`Bearer ${this.apiKey}`,"Content-Type":"application/json"}}),a=yield s.json();if(v(s.status)){if(429!==s.status)throw new Error(JSON.stringify(a));if(this.retryOnRateLimit)return yield g(o,{method:"post",body:JSON.stringify(n),headers:{Authorization:`Bearer ${this.apiKey}`,"Content-Type":"application/json"}},this.retryTimeout,this.maxRetry,"records")}return a.records}catch(t){throw new Error(t)}})),this.bulkUpdate=(t,r,i)=>R(this,void 0,void 0,(function*(){try{b(t,"table","string"),b(r,"records","array"),i&&(b(i.destructive,"opts.desctructive","boolean",!1),b(i.typecast,"opts.typecast","boolean",!1));const o=`${this.baseURL}/${this.base}/${t}`,n={records:r};void 0!==(null==i?void 0:i.typecast)&&(n.typecast=null==i?void 0:i.typecast);const s=yield e(o,{method:(null==i?void 0:i.destructive)?"put":"patch",body:JSON.stringify(n),headers:{Authorization:`Bearer ${this.apiKey}`,"Content-Type":"application/json"}}),a=yield s.json();if(v(s.status)){if(429!==s.status)throw new Error(JSON.stringify(a));if(this.retryOnRateLimit)return yield g(o,{method:(null==i?void 0:i.destructive)?"put":"patch",body:JSON.stringify(n),headers:{Authorization:`Bearer ${this.apiKey}`,"Content-Type":"application/json"}},this.retryTimeout,this.maxRetry,"records")}return a.records}catch(t){throw new Error(t)}})),this.bulkDelete=(t,r)=>R(this,void 0,void 0,(function*(){try{b(t,"table","string"),b(r,"ids","array");let i="";r.forEach(((t,e)=>{i=0!==e?`${i}&records[]=${t}`:`records[]=${t}`}));const o=`${this.baseURL}/${this.base}/${t}?${encodeURI(i)}`,n=yield e(o,{method:"delete",headers:{Authorization:`Bearer ${this.apiKey}`}}),s=yield n.json();if(v(n.status)){if(429!==n.status)throw new Error(JSON.stringify(s));if(this.retryOnRateLimit)return yield g(o,{method:"delete",headers:{Authorization:`Bearer ${this.apiKey}`}},this.retryTimeout,this.maxRetry,"records")}return s.records}catch(t){throw new Error(t)}})),this.upsertRecord=(t,e,r,i)=>R(this,void 0,void 0,(function*(){b(t,"table","string"),b(e,"filterString","string"),b(r,"record","object"),i&&(b(i.destructive,"opts.desctructive","boolean",!1),b(i.typecast,"opts.typecast","boolean",!1));const o=yield this.select(t,{filterByFormula:e});return o[0]?yield this.updateRecord(t,{id:o[0].id,fields:r},i):yield this.createRecord(t,r,null==i?void 0:i.typecast)})),!t)throw new Error("API Key is required.");if(!r)throw new Error("Base ID is required.");this.apiKey=t,this.base=r,this.retryOnRateLimit=(null==i?void 0:i.retryOnRateLimit)||!0,this.retryTimeout=(null==i?void 0:i.retryTimeout)||5e3,this.maxRetry=(null==i?void 0:i.maxRetry)||6e4,this.baseURL=(null==i?void 0:i.baseURL)||"https://api.airtable.com/v0"}})})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,